import { readFileAsDataURL } from '@webacad/observable-file-reader';
import { Component, Input, Optional, Self, ViewChild, NgModule } from '@angular/core';
import { NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatDividerModule } from '@angular/material/divider';
import { MatListModule } from '@angular/material/list';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatIconModule } from '@angular/material/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const imageMimeTypes = [
    'image/gif', 'image/png', 'image/jpeg',
];
class UploadFile {
    /**
     * @param {?} file
     * @param {?=} _progress
     */
    constructor(file, _progress = 0) {
        this.file = file;
        this._progress = _progress;
        this.icon = 'cloud_upload';
    }
    /**
     * @return {?}
     */
    get progress() {
        return this._progress;
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    set progress(progress) {
        this._progress = progress;
    }
    /**
     * @return {?}
     */
    supportsImagePreview() {
        return imageMimeTypes.indexOf(this.file.type) >= 0;
    }
    /**
     * @return {?}
     */
    getImageSource() {
        if (typeof this.imageSource !== 'undefined') {
            return this.imageSource;
        }
        return this.imageSource = readFileAsDataURL(this.file);
    }
    /**
     * @param {?} add
     * @return {?}
     */
    increaseProgress(add) {
        this.progress += add;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
let nextUniqueId = 0;
class BaseMatFileUploadComponent {
    /**
     * @param {?} _defaultErrorStateMatcher
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} ngControl
     */
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
/** @type {?} */
const _BaseMatFileUploadComponentMixin = mixinErrorState(BaseMatFileUploadComponent);
class MatFileUploadComponent extends _BaseMatFileUploadComponentMixin {
    /**
     * @param {?} defaultErrorStateMatcher
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} ngControl
     */
    constructor(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.ngControl = ngControl;
        this.required = false;
        this.multiple = false;
        this.preview = false;
        this.previewPosition = 'bottom';
        this.dense = false;
        this.selectedText = defaultSelectedText;
        this.visibleValue = '';
        this.shouldLabelFloat = true;
        this._files = [];
        this._uid = `wa-mat-file-upload-${nextUniqueId++}`;
        this.onTouched = () => { };
        this._onChange = (_) => { };
        if (this.ngControl !== null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) { }
    /**
     * @return {?}
     */
    get disabled() {
        if (typeof this._disabled !== 'undefined') {
            return this._disabled;
        }
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return false;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = disabled;
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set id(id) {
        this._id = id || this._uid;
    }
    /**
     * @return {?}
     */
    get files() {
        return this._files;
    }
    /**
     * @return {?}
     */
    get empty() {
        return typeof this._value === 'undefined';
    }
    /**
     * @return {?}
     */
    get focused() {
        return false;
    }
    /**
     * @return {?}
     */
    openDialog() {
        if (this.fileUpload) {
            this.fileUpload.nativeElement.click();
        }
    }
    /**
     * @return {?}
     */
    clearFiles() {
        this._value = [];
        this._files = [];
        this.recalculate();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    removeFile(file) {
        this._value.splice(this._value.indexOf(file.file), 1);
        this._files.splice(this._files.indexOf(file), 1);
        this.recalculate();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.visibleValue = this.selectedText(this._files);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    /**
     * @param {?} files
     * @return {?}
     */
    onChange(files) {
        this._value = [];
        this._files = [];
        for (let i = 0; i < files.length; i++) {
            this._value.push(files[i]);
            this._files.push(new UploadFile(files[i]));
        }
        this.recalculate();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) { }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    onContainerClick() { }
    /**
     * @return {?}
     */
    focus() { }
    /**
     * @return {?}
     */
    setDescribedByIds() { }
    /**
     * @return {?}
     */
    recalculate() {
        this.fileUpload.nativeElement.value = '';
        this.visibleValue = this.selectedText(this._files);
        this._onChange(this._value);
        this.onTouched();
        this.updateErrorState();
    }
}
MatFileUploadComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'waMatFileUpload',
                selector: 'wa-mat-file-upload',
                template: "<ng-template #previewContainer>\n\t<mat-list *ngIf=\"preview && files.length\" [attr.dense]=\"dense ? 'dense' : null\">\n\t\t<ng-container *ngFor=\"let file of files; let isLast = last;\">\n\t\t\t<mat-list-item>\n\t\t\t\t<img *ngIf=\"file.supportsImagePreview(); else listItemIcon\" matListAvatar [src]=\"file.getImageSource() | async\">\n\t\t\t\t<ng-template #listItemIcon>\n\t\t\t\t\t<mat-icon mat-list-icon>{{ file.icon }}</mat-icon>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<h3 matLine>{{ file.file.name }}</h3>\n\n\t\t\t\t<mat-progress-bar *ngIf=\"file.progress\" matLine mode=\"determinate\" [value]=\"file.progress\"></mat-progress-bar>\n\n\t\t\t\t<button *ngIf=\"!disabled && file.progress === 0\" mat-icon-button (click)=\"removeFile(file)\" type=\"button\">\n\t\t\t\t\t<mat-icon>close</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-list-item>\n\t\t\t<mat-divider *ngIf=\"!isLast\"></mat-divider>\n\t\t</ng-container>\n\t</mat-list>\n</ng-template>\n\n<ng-container *ngIf=\"previewPosition === 'top'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n\n<input #fileUpload type=\"file\" (change)=\"onChange($event.target.files)\" [multiple]=\"multiple\" style=\"display: none;\">\n\n<div>\n\t<button mat-raised-button (click)=\"openDialog()\" [color]=\"color\" [disabled]=\"disabled\" type=\"button\"><ng-content></ng-content></button>\n\t<span [ngClass]=\"{'mat-caption': dense}\" style=\"padding-left: 10px;\">\n\t\t{{ visibleValue }}\n\t\t<button *ngIf=\"!disabled && files.length\" mat-icon-button (click)=\"clearFiles()\" type=\"button\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</span>\n</div>\n\n<ng-container *ngIf=\"previewPosition === 'bottom'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n",
                providers: [
                    {
                        provide: MatFormFieldControl,
                        useExisting: MatFileUploadComponent,
                    },
                ]
            }] }
];
/** @nocollapse */
MatFileUploadComponent.ctorParameters = () => [
    { type: ErrorStateMatcher },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
MatFileUploadComponent.propDecorators = {
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    multiple: [{ type: Input }],
    color: [{ type: Input }],
    preview: [{ type: Input }],
    previewPosition: [{ type: Input }],
    dense: [{ type: Input }],
    selectedText: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }]
};
/**
 * @param {?} files
 * @return {?}
 */
function defaultSelectedText(files) {
    if (files.length === 0) {
        return '';
    }
    if (files.length === 1) {
        return files[0].file.name;
    }
    return files.length + ' Files selected';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MatFileUploadModule {
}
MatFileUploadModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatButtonModule, MatDividerModule, MatListModule, MatProgressBarModule, MatIconModule,
                ],
                declarations: [
                    MatFileUploadComponent,
                ],
                exports: [
                    MatFileUploadComponent,
                ],
                providers: [
                    ErrorStateMatcher,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} maxSize
 * @return {?}
 */
function fileMaxSize(maxSize) {
    return fileValidation((file) => file.size > maxSize, (errors) => {
        return {
            fileMaxSize: {
                maxSize: maxSize,
                invalidFiles: errors,
            },
        };
    });
}
/**
 * @param {?} allowedTypes
 * @return {?}
 */
function fileType(allowedTypes) {
    return fileValidation((file) => allowedTypes.indexOf(file.type) < 0, (errors) => {
        return {
            fileType: {
                allowedTypes: allowedTypes,
                invalidFiles: errors,
            },
        };
    });
}
/**
 * @param {?} validator
 * @param {?} createErrors
 * @return {?}
 */
function fileValidation(validator, createErrors) {
    return (control) => {
        if (!control.value) {
            return null;
        }
        /** @type {?} */
        const files = control.value;
        /** @type {?} */
        const errors = [];
        for (let i = 0; i < files.length; i++) {
            if (validator(files[i])) {
                errors.push(files[i]);
            }
        }
        if (errors.length) {
            return createErrors(errors);
        }
        return null;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MatFileUploadComponent, MatFileUploadModule, UploadFile, fileMaxSize, fileType, BaseMatFileUploadComponent as ɵa, _BaseMatFileUploadComponentMixin as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,