/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Optional, Self, ViewChild, ElementRef } from '@angular/core';
import { NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { UploadFile } from './upload-file';
/** @type {?} */
let nextUniqueId = 0;
export class BaseMatFileUploadComponent {
    /**
     * @param {?} _defaultErrorStateMatcher
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} ngControl
     */
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
if (false) {
    /** @type {?} */
    BaseMatFileUploadComponent.prototype._defaultErrorStateMatcher;
    /** @type {?} */
    BaseMatFileUploadComponent.prototype._parentForm;
    /** @type {?} */
    BaseMatFileUploadComponent.prototype._parentFormGroup;
    /** @type {?} */
    BaseMatFileUploadComponent.prototype.ngControl;
}
/** @type {?} */
export const _BaseMatFileUploadComponentMixin = mixinErrorState(BaseMatFileUploadComponent);
export class MatFileUploadComponent extends _BaseMatFileUploadComponentMixin {
    /**
     * @param {?} defaultErrorStateMatcher
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} ngControl
     */
    constructor(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);
        this.ngControl = ngControl;
        this.required = false;
        this.multiple = false;
        this.preview = false;
        this.previewPosition = 'bottom';
        this.dense = false;
        this.selectedText = defaultSelectedText;
        this.visibleValue = '';
        this.shouldLabelFloat = true;
        this._files = [];
        this._uid = `wa-mat-file-upload-${nextUniqueId++}`;
        this.onTouched = () => { };
        this._onChange = (_) => { };
        if (this.ngControl !== null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) { }
    /**
     * @return {?}
     */
    get disabled() {
        if (typeof this._disabled !== 'undefined') {
            return this._disabled;
        }
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return false;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = disabled;
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set id(id) {
        this._id = id || this._uid;
    }
    /**
     * @return {?}
     */
    get files() {
        return this._files;
    }
    /**
     * @return {?}
     */
    get empty() {
        return typeof this._value === 'undefined';
    }
    /**
     * @return {?}
     */
    get focused() {
        return false;
    }
    /**
     * @return {?}
     */
    openDialog() {
        if (this.fileUpload) {
            this.fileUpload.nativeElement.click();
        }
    }
    /**
     * @return {?}
     */
    clearFiles() {
        this._value = [];
        this._files = [];
        this.recalculate();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    removeFile(file) {
        this._value.splice(this._value.indexOf(file.file), 1);
        this._files.splice(this._files.indexOf(file), 1);
        this.recalculate();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.visibleValue = this.selectedText(this._files);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    /**
     * @param {?} files
     * @return {?}
     */
    onChange(files) {
        this._value = [];
        this._files = [];
        for (let i = 0; i < files.length; i++) {
            this._value.push(files[i]);
            this._files.push(new UploadFile(files[i]));
        }
        this.recalculate();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) { }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    onContainerClick() { }
    /**
     * @return {?}
     */
    focus() { }
    /**
     * @return {?}
     */
    setDescribedByIds() { }
    /**
     * @return {?}
     */
    recalculate() {
        this.fileUpload.nativeElement.value = '';
        this.visibleValue = this.selectedText(this._files);
        this._onChange(this._value);
        this.onTouched();
        this.updateErrorState();
    }
}
MatFileUploadComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'waMatFileUpload',
                selector: 'wa-mat-file-upload',
                template: "<ng-template #previewContainer>\n\t<mat-list *ngIf=\"preview && files.length\" [attr.dense]=\"dense ? 'dense' : null\">\n\t\t<ng-container *ngFor=\"let file of files; let isLast = last;\">\n\t\t\t<mat-list-item>\n\t\t\t\t<img *ngIf=\"file.supportsImagePreview(); else listItemIcon\" matListAvatar [src]=\"file.getImageSource() | async\">\n\t\t\t\t<ng-template #listItemIcon>\n\t\t\t\t\t<mat-icon mat-list-icon>{{ file.icon }}</mat-icon>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<h3 matLine>{{ file.file.name }}</h3>\n\n\t\t\t\t<mat-progress-bar *ngIf=\"file.progress\" matLine mode=\"determinate\" [value]=\"file.progress\"></mat-progress-bar>\n\n\t\t\t\t<button *ngIf=\"!disabled && file.progress === 0\" mat-icon-button (click)=\"removeFile(file)\" type=\"button\">\n\t\t\t\t\t<mat-icon>close</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-list-item>\n\t\t\t<mat-divider *ngIf=\"!isLast\"></mat-divider>\n\t\t</ng-container>\n\t</mat-list>\n</ng-template>\n\n<ng-container *ngIf=\"previewPosition === 'top'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n\n<input #fileUpload type=\"file\" (change)=\"onChange($event.target.files)\" [multiple]=\"multiple\" style=\"display: none;\">\n\n<div>\n\t<button mat-raised-button (click)=\"openDialog()\" [color]=\"color\" [disabled]=\"disabled\" type=\"button\"><ng-content></ng-content></button>\n\t<span [ngClass]=\"{'mat-caption': dense}\" style=\"padding-left: 10px;\">\n\t\t{{ visibleValue }}\n\t\t<button *ngIf=\"!disabled && files.length\" mat-icon-button (click)=\"clearFiles()\" type=\"button\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</span>\n</div>\n\n<ng-container *ngIf=\"previewPosition === 'bottom'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n",
                providers: [
                    {
                        provide: MatFormFieldControl,
                        useExisting: MatFileUploadComponent,
                    },
                ]
            }] }
];
/** @nocollapse */
MatFileUploadComponent.ctorParameters = () => [
    { type: ErrorStateMatcher },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
MatFileUploadComponent.propDecorators = {
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    multiple: [{ type: Input }],
    color: [{ type: Input }],
    preview: [{ type: Input }],
    previewPosition: [{ type: Input }],
    dense: [{ type: Input }],
    selectedText: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MatFileUploadComponent.prototype.placeholder;
    /** @type {?} */
    MatFileUploadComponent.prototype.required;
    /** @type {?} */
    MatFileUploadComponent.prototype.multiple;
    /** @type {?} */
    MatFileUploadComponent.prototype.color;
    /** @type {?} */
    MatFileUploadComponent.prototype.preview;
    /** @type {?} */
    MatFileUploadComponent.prototype.previewPosition;
    /** @type {?} */
    MatFileUploadComponent.prototype.dense;
    /** @type {?} */
    MatFileUploadComponent.prototype.selectedText;
    /** @type {?} */
    MatFileUploadComponent.prototype.fileUpload;
    /** @type {?} */
    MatFileUploadComponent.prototype.visibleValue;
    /** @type {?} */
    MatFileUploadComponent.prototype.shouldLabelFloat;
    /** @type {?} */
    MatFileUploadComponent.prototype._value;
    /** @type {?} */
    MatFileUploadComponent.prototype._files;
    /** @type {?} */
    MatFileUploadComponent.prototype._disabled;
    /** @type {?} */
    MatFileUploadComponent.prototype._id;
    /** @type {?} */
    MatFileUploadComponent.prototype._uid;
    /** @type {?} */
    MatFileUploadComponent.prototype.onTouched;
    /** @type {?} */
    MatFileUploadComponent.prototype._onChange;
    /** @type {?} */
    MatFileUploadComponent.prototype.ngControl;
}
/**
 * @param {?} files
 * @return {?}
 */
function defaultSelectedText(files) {
    if (files.length === 0) {
        return '';
    }
    if (files.length === 1) {
        return files[0].file.name;
    }
    return files.length + ' Files selected';
}

//# sourceMappingURL=data:application/json;base64,