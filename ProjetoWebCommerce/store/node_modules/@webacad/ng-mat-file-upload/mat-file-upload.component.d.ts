import { OnInit, OnDestroy, ElementRef } from '@angular/core';
import { ControlValueAccessor, NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { ErrorStateMatcher, CanUpdateErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { UploadFile } from './upload-file';
export declare class BaseMatFileUploadComponent {
    _defaultErrorStateMatcher: ErrorStateMatcher;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    ngControl: NgControl;
    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);
}
export declare const _BaseMatFileUploadComponentMixin: import("@angular/material/core/typings/common-behaviors/constructor").Constructor<CanUpdateErrorState> & typeof BaseMatFileUploadComponent;
export declare class MatFileUploadComponent extends _BaseMatFileUploadComponentMixin implements OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<Array<File>> {
    readonly ngControl: NgControl;
    placeholder: string;
    required: boolean;
    multiple: boolean;
    color: string | undefined;
    preview: boolean;
    previewPosition: 'top' | 'bottom';
    dense: boolean;
    selectedText: (files: Array<UploadFile>) => string;
    fileUpload: ElementRef;
    visibleValue: string;
    shouldLabelFloat: boolean;
    private _value;
    private _files;
    private _disabled;
    private _id;
    private _uid;
    constructor(defaultErrorStateMatcher: ErrorStateMatcher, parentForm: NgForm, parentFormGroup: FormGroupDirective, ngControl: NgControl);
    value: Array<File>;
    disabled: boolean;
    id: string;
    readonly files: Array<UploadFile>;
    readonly empty: boolean;
    readonly focused: boolean;
    openDialog(): void;
    clearFiles(): void;
    removeFile(file: UploadFile): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onTouched: () => void;
    onChange(files: FileList): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    onContainerClick(): void;
    focus(): void;
    setDescribedByIds(): void;
    private _onChange;
    private recalculate;
}
