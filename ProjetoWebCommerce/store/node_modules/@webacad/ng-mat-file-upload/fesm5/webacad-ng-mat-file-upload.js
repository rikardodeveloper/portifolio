import { readFileAsDataURL } from '@webacad/observable-file-reader';
import { __extends } from 'tslib';
import { Component, Input, Optional, Self, ViewChild, NgModule } from '@angular/core';
import { NgForm, FormGroupDirective, NgControl } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatDividerModule } from '@angular/material/divider';
import { MatListModule } from '@angular/material/list';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatIconModule } from '@angular/material/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var imageMimeTypes = [
    'image/gif', 'image/png', 'image/jpeg',
];
var UploadFile = /** @class */ (function () {
    function UploadFile(file, _progress) {
        if (_progress === void 0) { _progress = 0; }
        this.file = file;
        this._progress = _progress;
        this.icon = 'cloud_upload';
    }
    Object.defineProperty(UploadFile.prototype, "progress", {
        get: /**
         * @return {?}
         */
        function () {
            return this._progress;
        },
        set: /**
         * @param {?} progress
         * @return {?}
         */
        function (progress) {
            this._progress = progress;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UploadFile.prototype.supportsImagePreview = /**
     * @return {?}
     */
    function () {
        return imageMimeTypes.indexOf(this.file.type) >= 0;
    };
    /**
     * @return {?}
     */
    UploadFile.prototype.getImageSource = /**
     * @return {?}
     */
    function () {
        if (typeof this.imageSource !== 'undefined') {
            return this.imageSource;
        }
        return this.imageSource = readFileAsDataURL(this.file);
    };
    /**
     * @param {?} add
     * @return {?}
     */
    UploadFile.prototype.increaseProgress = /**
     * @param {?} add
     * @return {?}
     */
    function (add) {
        this.progress += add;
    };
    return UploadFile;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var nextUniqueId = 0;
var BaseMatFileUploadComponent = /** @class */ (function () {
    function BaseMatFileUploadComponent(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
    return BaseMatFileUploadComponent;
}());
/** @type {?} */
var _BaseMatFileUploadComponentMixin = mixinErrorState(BaseMatFileUploadComponent);
var MatFileUploadComponent = /** @class */ (function (_super) {
    __extends(MatFileUploadComponent, _super);
    function MatFileUploadComponent(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) {
        var _this = _super.call(this, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl) || this;
        _this.ngControl = ngControl;
        _this.required = false;
        _this.multiple = false;
        _this.preview = false;
        _this.previewPosition = 'bottom';
        _this.dense = false;
        _this.selectedText = defaultSelectedText;
        _this.visibleValue = '';
        _this.shouldLabelFloat = true;
        _this._files = [];
        _this._uid = "wa-mat-file-upload-" + nextUniqueId++;
        _this.onTouched = function () { };
        _this._onChange = function (_) { };
        if (_this.ngControl !== null) {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(MatFileUploadComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            if (typeof this._disabled !== 'undefined') {
                return this._disabled;
            }
            if (this.ngControl && this.ngControl.disabled !== null) {
                return this.ngControl.disabled;
            }
            return false;
        },
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this._id = id || this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "files", {
        get: /**
         * @return {?}
         */
        function () {
            return this._files;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return typeof this._value === 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatFileUploadComponent.prototype, "focused", {
        get: /**
         * @return {?}
         */
        function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        if (this.fileUpload) {
            this.fileUpload.nativeElement.click();
        }
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.clearFiles = /**
     * @return {?}
     */
    function () {
        this._value = [];
        this._files = [];
        this.recalculate();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    MatFileUploadComponent.prototype.removeFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this._value.splice(this._value.indexOf(file.file), 1);
        this._files.splice(this._files.indexOf(file), 1);
        this.recalculate();
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.visibleValue = this.selectedText(this._files);
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stateChanges.complete();
    };
    /**
     * @param {?} files
     * @return {?}
     */
    MatFileUploadComponent.prototype.onChange = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this._value = [];
        this._files = [];
        for (var i = 0; i < files.length; i++) {
            this._value.push(files[i]);
            this._files.push(new UploadFile(files[i]));
        }
        this.recalculate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatFileUploadComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    MatFileUploadComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MatFileUploadComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MatFileUploadComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.onContainerClick = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.focus = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.setDescribedByIds = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MatFileUploadComponent.prototype.recalculate = /**
     * @return {?}
     */
    function () {
        this.fileUpload.nativeElement.value = '';
        this.visibleValue = this.selectedText(this._files);
        this._onChange(this._value);
        this.onTouched();
        this.updateErrorState();
    };
    MatFileUploadComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'waMatFileUpload',
                    selector: 'wa-mat-file-upload',
                    template: "<ng-template #previewContainer>\n\t<mat-list *ngIf=\"preview && files.length\" [attr.dense]=\"dense ? 'dense' : null\">\n\t\t<ng-container *ngFor=\"let file of files; let isLast = last;\">\n\t\t\t<mat-list-item>\n\t\t\t\t<img *ngIf=\"file.supportsImagePreview(); else listItemIcon\" matListAvatar [src]=\"file.getImageSource() | async\">\n\t\t\t\t<ng-template #listItemIcon>\n\t\t\t\t\t<mat-icon mat-list-icon>{{ file.icon }}</mat-icon>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<h3 matLine>{{ file.file.name }}</h3>\n\n\t\t\t\t<mat-progress-bar *ngIf=\"file.progress\" matLine mode=\"determinate\" [value]=\"file.progress\"></mat-progress-bar>\n\n\t\t\t\t<button *ngIf=\"!disabled && file.progress === 0\" mat-icon-button (click)=\"removeFile(file)\" type=\"button\">\n\t\t\t\t\t<mat-icon>close</mat-icon>\n\t\t\t\t</button>\n\t\t\t</mat-list-item>\n\t\t\t<mat-divider *ngIf=\"!isLast\"></mat-divider>\n\t\t</ng-container>\n\t</mat-list>\n</ng-template>\n\n<ng-container *ngIf=\"previewPosition === 'top'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n\n<input #fileUpload type=\"file\" (change)=\"onChange($event.target.files)\" [multiple]=\"multiple\" style=\"display: none;\">\n\n<div>\n\t<button mat-raised-button (click)=\"openDialog()\" [color]=\"color\" [disabled]=\"disabled\" type=\"button\"><ng-content></ng-content></button>\n\t<span [ngClass]=\"{'mat-caption': dense}\" style=\"padding-left: 10px;\">\n\t\t{{ visibleValue }}\n\t\t<button *ngIf=\"!disabled && files.length\" mat-icon-button (click)=\"clearFiles()\" type=\"button\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</span>\n</div>\n\n<ng-container *ngIf=\"previewPosition === 'bottom'\">\n\t<ng-container *ngTemplateOutlet=\"previewContainer\"></ng-container>\n</ng-container>\n",
                    providers: [
                        {
                            provide: MatFormFieldControl,
                            useExisting: MatFileUploadComponent,
                        },
                    ]
                }] }
    ];
    /** @nocollapse */
    MatFileUploadComponent.ctorParameters = function () { return [
        { type: ErrorStateMatcher },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    MatFileUploadComponent.propDecorators = {
        placeholder: [{ type: Input }],
        required: [{ type: Input }],
        multiple: [{ type: Input }],
        color: [{ type: Input }],
        preview: [{ type: Input }],
        previewPosition: [{ type: Input }],
        dense: [{ type: Input }],
        selectedText: [{ type: Input }],
        fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        id: [{ type: Input }]
    };
    return MatFileUploadComponent;
}(_BaseMatFileUploadComponentMixin));
/**
 * @param {?} files
 * @return {?}
 */
function defaultSelectedText(files) {
    if (files.length === 0) {
        return '';
    }
    if (files.length === 1) {
        return files[0].file.name;
    }
    return files.length + ' Files selected';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MatFileUploadModule = /** @class */ (function () {
    function MatFileUploadModule() {
    }
    MatFileUploadModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MatButtonModule, MatDividerModule, MatListModule, MatProgressBarModule, MatIconModule,
                    ],
                    declarations: [
                        MatFileUploadComponent,
                    ],
                    exports: [
                        MatFileUploadComponent,
                    ],
                    providers: [
                        ErrorStateMatcher,
                    ],
                },] }
    ];
    return MatFileUploadModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} maxSize
 * @return {?}
 */
function fileMaxSize(maxSize) {
    return fileValidation(function (file) { return file.size > maxSize; }, function (errors) {
        return {
            fileMaxSize: {
                maxSize: maxSize,
                invalidFiles: errors,
            },
        };
    });
}
/**
 * @param {?} allowedTypes
 * @return {?}
 */
function fileType(allowedTypes) {
    return fileValidation(function (file) { return allowedTypes.indexOf(file.type) < 0; }, function (errors) {
        return {
            fileType: {
                allowedTypes: allowedTypes,
                invalidFiles: errors,
            },
        };
    });
}
/**
 * @param {?} validator
 * @param {?} createErrors
 * @return {?}
 */
function fileValidation(validator, createErrors) {
    return function (control) {
        if (!control.value) {
            return null;
        }
        /** @type {?} */
        var files = control.value;
        /** @type {?} */
        var errors = [];
        for (var i = 0; i < files.length; i++) {
            if (validator(files[i])) {
                errors.push(files[i]);
            }
        }
        if (errors.length) {
            return createErrors(errors);
        }
        return null;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MatFileUploadComponent, MatFileUploadModule, UploadFile, fileMaxSize, fileType, BaseMatFileUploadComponent as ɵa, _BaseMatFileUploadComponentMixin as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,